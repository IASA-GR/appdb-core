<?php
/**
 * Copyright (C) 2015 IASA - Institute of Accelerating Systems and Applications (http://www.iasa.gr)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */
?>
<?php
// PLEASE DO NOT EDIT THIS FILE
// IT IS AUTOMATOCALLY GENERATED BY THE MODELLER
// AND ANY CHANGES WILL BE OVERWRITTEN
namespace Application\Model;

class VOs2MapperBase
{
	protected $_dbTable;

	public function setDbTable($dbTable)
	{
		if (is_string($dbTable)) {
			$dbTable = new $dbTable();
		}
		if (!$dbTable instanceof Zend_Db_Table_Abstract) {
			throw new Exception('Invalid table data gateway provided');
 		}
        	$this->_dbTable = $dbTable;
        	return $this;
	}

	public function getDbTable()
	{
	    if (null === $this->_dbTable) {
	        $this->setDbTable('DbTable_VOs2');
	    }
	    return $this->_dbTable;
	}

	public function save(AROItem $value)
	{
	    $data = array(
	        'id'   => $value->getId()=='NULL'?null:$value->getId(),
	        'name'   => $value->getName()=='NULL'?null:$value->getName(),
	        'serial'   => $value->getSerial()=='NULL'?null:$value->getSerial(),
	        'status'   => $value->getStatus()=='NULL'?null:$value->getStatus(),
	        'alias'   => $value->getAlias()=='NULL'?null:$value->getAlias(),
	        'depricated'   => $value->getDepricated()=='NULL'?null:$value->getDepricated(),
	        'sourceid'   => $value->getDepricated()=='NULL'?null:$value->getSourceID(),
	    );

	    $q1 = 'id = ?' ;
	    $q2 = $value->id;
	    if ( is_array($q1) ) {
		    $select = $this->getDbTable()->getSql()->select();
		    for ($i=0; $i < count($q1); $i++) {
		    	$select->where($q1[$i],$q2[$i]);
		    }
		    $new_entry = ( count($this->getDbTable()->fetchAll($select)) == 0 );
		    if ( $new_entry ) {
			$this->getDbTable()->insert($data);
		    } else {
		        $s = array();
			for ($i=0; $i < count($q1); $i++) {
				$s[]=$this->getDbTable()->getAdapter()->quoteInto($q1[$i],$q2[$i]);
			}
			$this->getDbTable()->update($data, $s);
		    }
	    } else {
		    if (null === ($id = $value->id)) {
			unset($data['id']);
			$this->getDbTable()->insert($data);
                        if ( count($rs) > 0 ) $value->Id = $rs[0]['ID'];
		    } else {
			$s = $this->getDbTable()->getAdapter()->quoteInto($q1,$q2);
			$this->getDbTable()->update($data, $s);
		    }
	    }
	}

	public function delete(VOs2 $value)
	{
		$q1 = 'id = ?' ;
		$q2 = $value->id;
		if ( is_array($q1) ) {
			$s = array();
			for ($i=0; $i < count($q1); $i++) {
				$s[]=$this->getDbTable()->getAdapter()->quoteInto($q1[$i],$q2[$i]);
			}
		} else $s=$this->getDbTable()->getAdapter()->quoteInto($q1,$q2);
		$this->getDbTable()->delete($s);
	}

	private function populate(&$entry,$row)
	{
		$entry->setId($row->id);
		$entry->setName($row->name);
		$entry->setSerial($row->serial);
		$entry->setStatus($row->status);
		$entry->setAlias($row->alias);
		$entry->setDepricated($row->depricated);
		$entry->setSourceID($row->sourceid);
	}

	public function find($id, VOs2 &$value)
	{
	    $result = $this->getDbTable()->find($id);
	    if (0 == count($result)) {
	        return;
	    }
	    $row = $result->current();
	    $this->populate($value,$row);
	}

	public function count($filter = null)
	{
		$select = $this->getDbTable()->getSql()->select();
		$select->from($this->getDbTable(),array('COUNT(DISTINCT ID) AS count'));
		if ( ! ($filter === null) ) {
			for ( $i = 0; $i < $filter->count(); $i++ ) {
				if ( is_array($filter->items($i)->Id) ) {
					if ( ! ((string)($filter->items($i)->Id) == '') ) $select->where('id IN ('.implode(',',$filter->items($i)->Id).')');
				} else {
					if ( (string)($filter->items($i)->Id) == 'NULL' ) $select->where('id IS NULL');
					elseif ( ! ((string)($filter->items($i)->Id) == '') ) $select->where('id = ?',$filter->items($i)->Id);
				}
				if ( (string)($filter->items($i)->Name) == 'NULL' ) $select->where('name IS NULL');
				elseif ( ! ((string)($filter->items($i)->Name) == '') ) $select->where('name LIKE ?','%'.$filter->items($i)->Name.'%');
				if ( is_array($filter->items($i)->Serial) ) {
					if ( ! ((string)($filter->items($i)->Serial) == '') ) $select->where('serial IN ('.implode(',',$filter->items($i)->Serial).')');
				} else {
					if ( (string)($filter->items($i)->Serial) == 'NULL' ) $select->where('serial IS NULL');
					elseif ( ! ((string)($filter->items($i)->Serial) == '') ) $select->where('serial = ?',$filter->items($i)->Serial);
				}
				if ( (string)($filter->items($i)->Status) == 'NULL' ) $select->where('status IS NULL');
				elseif ( ! ((string)($filter->items($i)->Status) == '') ) $select->where('status LIKE ?','%'.$filter->items($i)->Status.'%');
				if ( (string)($filter->items($i)->Alias) == 'NULL' ) $select->where('alias IS NULL');
				elseif ( ! ((string)($filter->items($i)->Alias) == '') ) $select->where('alias LIKE ?','%'.$filter->items($i)->Alias.'%');
				if ( is_array($filter->items($i)->Depricated) ) {
					if ( ! ((string)($filter->items($i)->Depricated) == '') ) $select->where('depricated IN ('.implode(',',$filter->items($i)->Depricated).')');
				} else {
					if ( (string)($filter->items($i)->Depricated) == 'NULL' ) $select->where('depricated IS NULL');
					elseif ( ! ((string)($filter->items($i)->Depricated) == '') ) $select->where('depricated = ?',$filter->items($i)->Depricated);
				}
				if ( is_array($filter->items($i)->SourceID) ) {
					if ( ! ((string)($filter->items($i)->SourceID) == '') ) $select->where('sourceid IN ('.implode(',',$filter->items($i)->SourceID).')');
				} else {
					if ( (string)($filter->items($i)->SourceID) == 'NULL' ) $select->where('sourceid IS NULL');
					elseif ( ! ((string)($filter->items($i)->SourceID) == '') ) $select->where('sourceid = ?',$filter->items($i)->SourceID);
				}

			}

		}
		$res = $this->getDbTable()->fetchAll($select);
		return $res[0]->count;

	}

	public function fetchAll($filter = null)
	{
		if ( ! ($filter === null) ) {
			$select = $this->getDbTable()->getSql()->select();
			for ( $i = 0; $i < $filter->count(); $i++ ) {
				if ( is_array($filter->items($i)->Id) ) {
					if ( ! ((string)($filter->items($i)->Id) == '') ) $select->where('id IN ('.implode(',',$filter->items($i)->Id).')');
				} else {
					if ( (string)($filter->items($i)->Id) == 'NULL' ) $select->where('id IS NULL');
					elseif ( ! ((string)($filter->items($i)->Id) == '') ) $select->where('id = ?',$filter->items($i)->Id);
				}
				if ( (string)($filter->items($i)->Name) == 'NULL' ) $select->where('name IS NULL');
				elseif ( ! ((string)($filter->items($i)->Name) == '') ) $select->where('name LIKE ?','%'.$filter->items($i)->Name.'%');
				if ( is_array($filter->items($i)->Serial) ) {
					if ( ! ((string)($filter->items($i)->Serial) == '') ) $select->where('serial IN ('.implode(',',$filter->items($i)->Serial).')');
				} else {
					if ( (string)($filter->items($i)->Serial) == 'NULL' ) $select->where('serial IS NULL');
					elseif ( ! ((string)($filter->items($i)->Serial) == '') ) $select->where('serial = ?',$filter->items($i)->Serial);
				}
				if ( (string)($filter->items($i)->Status) == 'NULL' ) $select->where('status IS NULL');
				elseif ( ! ((string)($filter->items($i)->Status) == '') ) $select->where('status LIKE ?','%'.$filter->items($i)->Status.'%');
				if ( (string)($filter->items($i)->Alias) == 'NULL' ) $select->where('alias IS NULL');
				elseif ( ! ((string)($filter->items($i)->Alias) == '') ) $select->where('alias LIKE ?','%'.$filter->items($i)->Alias.'%');
				if ( is_array($filter->items($i)->Depricated) ) {
					if ( ! ((string)($filter->items($i)->Depricated) == '') ) $select->where('depricated IN ('.implode(',',$filter->items($i)->Depricated).')');
				} else {
					if ( (string)($filter->items($i)->Depricated) == 'NULL' ) $select->where('depricated IS NULL');
					elseif ( ! ((string)($filter->items($i)->Depricated) == '') ) $select->where('depricated = ?',$filter->items($i)->Depricated);
				}
				if ( is_array($filter->items($i)->SourceID) ) {
					if ( ! ((string)($filter->items($i)->SourceID) == '') ) $select->where('sourceid IN ('.implode(',',$filter->items($i)->SourceID).')');
				} else {
					if ( (string)($filter->items($i)->SourceID) == 'NULL' ) $select->where('sourceid IS NULL');
					elseif ( ! ((string)($filter->items($i)->SourceID) == '') ) $select->where('sourceid = ?',$filter->items($i)->SourceID);
				}
			}
			if ( ! ( $filter->orderBy === null ) ) {
				$select->order($filter->orderBy);
			}
			if ( ! ( $filter->limit === null ) ) {
				$select->limit($filter->limit[0],$filter->limit[1]);
			}
		} else {
			$select = null;
		}
		$resultSet = $this->getDbTable()->fetchAll($select);
	    	$entries = array();
	    	foreach ($resultSet as $row) {
	        	$entry = new VOs2();
	        	$this->populate($entry,$row);
	        	$entries[] = $entry;
	    	}
	    	return $entries;
	}
}
