<?php
// PLEASE DO NOT EDIT THIS FILE
// IT IS AUTOMATOCALLY GENERATED BY THE MODELLER
// AND ANY CHANGES WILL BE OVERWRITTEN
class Repository_Model_MetaProductReleasesMapperBase
{
	protected $_dbTable;

	private function myBool($v) { if ($v) return 1; else return 0; }

	public function setDbTable($dbTable)
	{
		if (is_string($dbTable)) {
			$dbTable = new $dbTable();
		}
		if (!$dbTable instanceof Zend_Db_Table_Abstract) {
			throw new Exception('Invalid table data gateway provided');
		}
			$this->_dbTable = $dbTable;
			return $this;
	}

	public function getDbTable()
	{
		if (null === $this->_dbTable) {
			$this->setDbTable('Repository_Model_DbTable_MetaProductReleases');
		}
		return $this->_dbTable;
	}

	public function save(Repository_Model_MetaProductRelease $value)
	{
		global $application;
		$data = array();
		if ( ! isnull($value->getId()) ) $data['id'] = $value->getId();
		if ( ! isnull($value->getCurrentStateId()) ) $data['currentStateId'] = $value->getCurrentStateId();
		if ( ! isnull($value->getPreviousStateId()) ) $data['previousStateId'] = $value->getPreviousStateId();
		if ( ! isnull($value->getDisplayVersion()) ) $data['displayVersion'] = $value->getDisplayVersion();
		if ( ! isnull($value->getParentId()) ) $data['parent_id'] = $value->getParentId();
		if ( ! isnull($value->getDisplayIndex()) ) $data['displayIndex'] = $value->getDisplayIndex();
		if ( ! isnull($value->getRepoAreaId()) ) $data['repoAreaId'] = $value->getRepoAreaId();
		if ( ! isnull($value->getPriority()) ) $data['priority'] = $value->getPriority();
		if ( ! isnull($value->getDescription()) ) $data['description'] = $value->getDescription();
		if ( ! isnull($value->getTechnologyProvider()) ) $data['technologyProvider'] = $value->getTechnologyProvider();
		if ( ! isnull($value->getTechnologyProviderShortName()) ) $data['technologyProviderShortName'] = $value->getTechnologyProviderShortName();
		if ( ! isnull($value->getISODate()) ) $data['ISODate'] = $value->getISODate();
		if ( ! isnull($value->getIncremental()) ) $data['incremental'] = $this->myBool($value->getIncremental());
		if ( ! isnull($value->getMajorVersion()) ) $data['majorVersion'] = $value->getMajorVersion();
		if ( ! isnull($value->getMinorVersion()) ) $data['minorVersion'] = $value->getMinorVersion();
		if ( ! isnull($value->getUpdateVersion()) ) $data['updateVersion'] = $value->getUpdateVersion();
		if ( ! isnull($value->getRevisionVersion()) ) $data['revisionVersion'] = $value->getRevisionVersion();
		if ( ! isnull($value->getReleaseNotes()) ) $data['releaseNotes'] = $value->getReleaseNotes();
		if ( ! isnull($value->getChangeLog()) ) $data['changeLog'] = $value->getChangeLog();
		if ( ! isnull($value->getInstallationNotes()) ) $data['installationNotes'] = $value->getInstallationNotes();
		if ( ! isnull($value->getKnownIssues()) ) $data['knownIssues'] = $value->getKnownIssues();
		if ( ! isnull($value->getRepositoryURL()) ) $data['repositoryURL'] = $value->getRepositoryURL();
		if ( ! isnull($value->getReleaseXML()) ) $data['releaseXML'] = $value->getReleaseXML();
		if ( ! isnull($value->getQualityCriteriaVerificationReport()) ) $data['qualityCriteriaVerificationReport'] = $value->getQualityCriteriaVerificationReport();
		if ( ! isnull($value->getStageRolloutReport()) ) $data['stageRolloutReport'] = $value->getStageRolloutReport();
		if ( ! isnull($value->getAdditionalDetails()) ) $data['additionalDetails'] = $value->getAdditionalDetails();
		if ( ! isnull($value->getDeleted()) ) $data['deleted'] = $value->getDeleted();
		if ( ! isnull($value->getExtraFld1()) ) $data['extraFld1'] = $value->getExtraFld1();
		if ( ! isnull($value->getExtraFld2()) ) $data['extraFld2'] = $value->getExtraFld2();
		if ( ! isnull($value->getExtraFld3()) ) $data['extraFld3'] = $value->getExtraFld3();
		if ( ! isnull($value->getExtraFld4()) ) $data['extraFld4'] = $value->getExtraFld4();
		if ( ! isnull($value->getExtraFld5()) ) $data['extraFld5'] = $value->getExtraFld5();
		if ( ! isnull($value->getTimestampInserted()) ) $data['timestampInserted'] = $value->getTimestampInserted();
		if ( ! isnull($value->getTimestampLastUpdated()) ) $data['timestampLastUpdated'] = $value->getTimestampLastUpdated();
		if ( ! isnull($value->getTimestampLastStateChange()) ) $data['timestampLastStateChange'] = $value->getTimestampLastStateChange();
		if ( ! isnull($value->getTimestampReleaseDate()) ) $data['timestampReleaseDate'] = $value->getTimestampReleaseDate();
		if ( ! isnull($value->getTimestampLastProductionBuild()) ) $data['timestampLastProductionBuild'] = $value->getTimestampLastProductionBuild();
		if ( ! isnull($value->getInsertedBy()) ) $data['insertedBy'] = $value->getInsertedBy();


		$q1 = 'id = ?';
		$q2 = $value->id;
		if (null === ($id = $value->id)) {
			unset($data['id']);
			$value->id = $this->getDbTable()->insert($data);
		} else {
			$s = $this->getDbTable()->getAdapter()->quoteInto($q1,$q2);
			$this->getDbTable()->update($data, $s);
		}
	}

	public function delete(Repository_Model_MetaProductRelease $value)
	{
		$q1 = 'id = ?';
		$q2 = $value->id;
		$s=$this->getDbTable()->getAdapter()->quoteInto($q1,$q2);
		$this->getDbTable()->delete($s);
	}

	public function populate(&$entry,$row)
	{
		$entry->setId($row->id);
		$entry->setCurrentStateId($row->currentStateId);
		$entry->setPreviousStateId($row->previousStateId);
		$entry->setDisplayVersion($row->displayVersion);
		$entry->setParentId($row->parent_id);
		$entry->setDisplayIndex($row->displayIndex);
		$entry->setRepoAreaId($row->repoAreaId);
		$entry->setPriority($row->priority);
		$entry->setDescription($row->description);
		$entry->setTechnologyProvider($row->technologyProvider);
		$entry->setTechnologyProviderShortName($row->technologyProviderShortName);
		$entry->setISODate($row->ISODate);
		$entry->setIncremental($row->incremental);
		$entry->setMajorVersion($row->majorVersion);
		$entry->setMinorVersion($row->minorVersion);
		$entry->setUpdateVersion($row->updateVersion);
		$entry->setRevisionVersion($row->revisionVersion);
		$entry->setReleaseNotes($row->releaseNotes);
		$entry->setChangeLog($row->changeLog);
		$entry->setInstallationNotes($row->installationNotes);
		$entry->setKnownIssues($row->knownIssues);
		$entry->setRepositoryURL($row->repositoryURL);
		$entry->setReleaseXML($row->releaseXML);
		$entry->setQualityCriteriaVerificationReport($row->qualityCriteriaVerificationReport);
		$entry->setStageRolloutReport($row->stageRolloutReport);
		$entry->setAdditionalDetails($row->additionalDetails);
		$entry->setDeleted($row->deleted);
		$entry->setExtraFld1($row->extraFld1);
		$entry->setExtraFld2($row->extraFld2);
		$entry->setExtraFld3($row->extraFld3);
		$entry->setExtraFld4($row->extraFld4);
		$entry->setExtraFld5($row->extraFld5);
		$entry->setTimestampInserted($row->timestampInserted);
		$entry->setTimestampLastUpdated($row->timestampLastUpdated);
		$entry->setTimestampLastStateChange($row->timestampLastStateChange);
		$entry->setTimestampReleaseDate($row->timestampReleaseDate);
		$entry->setTimestampLastProductionBuild($row->timestampLastProductionBuild);
		$entry->setInsertedBy($row->insertedBy);
	}

	public function find($id, Repository_Model_MetaProductReleases &$value)
	{
		$result = $this->getDbTable()->find($id);
		if (0 == count($result)) {
			return;
		}		$row = $result->current();
		$this->populate($value,$row);	}

	public function count($filter = null)
	{
		$select = $this->getDbTable()->select();
		$select->from($this->getDbTable(),array('COUNT(DISTINCT (id)) AS count'));
		if ( ($filter !== null) && ($filter->expr() != '') ) {
			$select->where($filter->expr());
		}
		$res = $this->getDbTable()->fetchAll($select);
		return $res[0]->count;
	}
	public function fetchAll($filter = null, $format = '')
	{
		$select = $this->getDbTable()->select();
		if ( ($filter !== null) && ($filter->expr() != '') ) {
			$select->where($filter->expr());
		}
		if ($filter !== null) $select->limit($filter->limit, $filter->offset);
		if ($filter !== null) $select->order($filter->orderBy);
		$resultSet = $this->getDbTable()->fetchAll($select);
		$entries = array();
		foreach ($resultSet as $row) {
			$entry = new Repository_Model_MetaProductRelease();
			$this->populate($entry,$row);
			if ($format === 'xml') $entry = $entry->toXML(true);
			$entries[] = $entry;
		}		return $entries;
	}
}