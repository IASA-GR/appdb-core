<?php
// PLEASE DO NOT EDIT THIS FILE
// IT IS AUTOMATOCALLY GENERATED BY THE MODELLER
// AND ANY CHANGES WILL BE OVERWRITTEN
class Repository_Model_MetaPoaReleasePackagesMapperBase
{
	protected $_dbTable;

	private function myBool($v) { if ($v) return 1; else return 0; }

	public function setDbTable($dbTable)
	{
		if (is_string($dbTable)) {
			$dbTable = new $dbTable();
		}
		if (!$dbTable instanceof Zend_Db_Table_Abstract) {
			throw new Exception('Invalid table data gateway provided');
		}
			$this->_dbTable = $dbTable;
			return $this;
	}

	public function getDbTable()
	{
		if (null === $this->_dbTable) {
			$this->setDbTable('Repository_Model_DbTable_MetaPoaReleasePackages');
		}
		return $this->_dbTable;
	}

	public function save(Repository_Model_MetaPoaReleasePackage $value)
	{
		global $application;
		$data = array();
		if ( ! isnull($value->getId()) ) $data['id'] = $value->getId();
		if ( ! isnull($value->getPoaId()) ) $data['poaId'] = $value->getPoaId();
		if ( ! isnull($value->getPkgName()) ) $data['pkgName'] = $value->getPkgName();
		if ( ! isnull($value->getPkgVersion()) ) $data['pkgVersion'] = $value->getPkgVersion();
		if ( ! isnull($value->getPkgRelease()) ) $data['pkgRelease'] = $value->getPkgRelease();
		if ( ! isnull($value->getPkgArch()) ) $data['pkgArch'] = $value->getPkgArch();
		if ( ! isnull($value->getPkgType()) ) $data['pkgType'] = $value->getPkgType();
		if ( ! isnull($value->getPkgFilename()) ) $data['pkgFilename'] = $value->getPkgFilename();
		if ( ! isnull($value->getPkgDescription()) ) $data['pkgDescription'] = $value->getPkgDescription();
		if ( ! isnull($value->getPkgInstallationSize()) ) $data['pkgInstallationSize'] = $value->getPkgInstallationSize();
		if ( ! isnull($value->getPkgGroup()) ) $data['pkgGroup'] = $value->getPkgGroup();
		if ( ! isnull($value->getPkgRequires()) ) $data['pkgRequires'] = $value->getPkgRequires();
		if ( ! isnull($value->getPkgLicense()) ) $data['pkgLicense'] = $value->getPkgLicense();
		if ( ! isnull($value->getPkgUrl()) ) $data['pkgUrl'] = $value->getPkgUrl();
		if ( ! isnull($value->getPkgGeneral()) ) $data['pkgGeneral'] = $value->getPkgGeneral();
		if ( ! isnull($value->getPkgMisc()) ) $data['pkgMisc'] = $value->getPkgMisc();
		if ( ! isnull($value->getPkgLevel()) ) $data['pkgLevel'] = $value->getPkgLevel();
		if ( ! isnull($value->getPkgSize()) ) $data['pkgSize'] = $value->getPkgSize();
		if ( ! isnull($value->getPkgMd5Sum()) ) $data['pkgMd5Sum'] = $value->getPkgMd5Sum();
		if ( ! isnull($value->getPkgSha1Sum()) ) $data['pkgSha1Sum'] = $value->getPkgSha1Sum();
		if ( ! isnull($value->getPkgSha256Sum()) ) $data['pkgSha256Sum'] = $value->getPkgSha256Sum();
		if ( ! isnull($value->getPkgVersionIndex()) ) $data['pkgVersionIndex'] = $value->getPkgVersionIndex();
		if ( ! isnull($value->getTimestampInserted()) ) $data['timestampInserted'] = $value->getTimestampInserted();
		if ( ! isnull($value->getInsertedBy()) ) $data['insertedBy'] = $value->getInsertedBy();


		$q1 = 'id = ?';
		$q2 = $value->id;
		if (null === ($id = $value->id)) {
			unset($data['id']);
			$value->id = $this->getDbTable()->insert($data);
		} else {
			$s = $this->getDbTable()->getAdapter()->quoteInto($q1,$q2);
			$this->getDbTable()->update($data, $s);
		}
	}

	public function delete(Repository_Model_MetaPoaReleasePackage $value)
	{
		$q1 = 'id = ?';
		$q2 = $value->id;
		$s=$this->getDbTable()->getAdapter()->quoteInto($q1,$q2);
		$this->getDbTable()->delete($s);
	}

	public function populate(&$entry,$row)
	{
		$entry->setId($row->id);
		$entry->setPoaId($row->poaId);
		$entry->setPkgName($row->pkgName);
		$entry->setPkgVersion($row->pkgVersion);
		$entry->setPkgRelease($row->pkgRelease);
		$entry->setPkgArch($row->pkgArch);
		$entry->setPkgType($row->pkgType);
		$entry->setPkgFilename($row->pkgFilename);
		$entry->setPkgDescription($row->pkgDescription);
		$entry->setPkgInstallationSize($row->pkgInstallationSize);
		$entry->setPkgGroup($row->pkgGroup);
		$entry->setPkgRequires($row->pkgRequires);
		$entry->setPkgLicense($row->pkgLicense);
		$entry->setPkgUrl($row->pkgUrl);
		$entry->setPkgGeneral($row->pkgGeneral);
		$entry->setPkgMisc($row->pkgMisc);
		$entry->setPkgLevel($row->pkgLevel);
		$entry->setPkgSize($row->pkgSize);
		$entry->setPkgMd5Sum($row->pkgMd5Sum);
		$entry->setPkgSha1Sum($row->pkgSha1Sum);
		$entry->setPkgSha256Sum($row->pkgSha256Sum);
		$entry->setPkgVersionIndex($row->pkgVersionIndex);
		$entry->setTimestampInserted($row->timestampInserted);
		$entry->setInsertedBy($row->insertedBy);
	}

	public function find($id, Repository_Model_MetaPoaReleasePackages &$value)
	{
		$result = $this->getDbTable()->find($id);
		if (0 == count($result)) {
			return;
		}		$row = $result->current();
		$this->populate($value,$row);	}

	public function count($filter = null)
	{
		$select = $this->getDbTable()->select();
		$select->from($this->getDbTable(),array('COUNT(DISTINCT (id)) AS count'));
		if ( ($filter !== null) && ($filter->expr() != '') ) {
			$select->where($filter->expr());
		}
		$res = $this->getDbTable()->fetchAll($select);
		return $res[0]->count;
	}
	public function fetchAll($filter = null, $format = '')
	{
		$select = $this->getDbTable()->select();
		if ( ($filter !== null) && ($filter->expr() != '') ) {
			$select->where($filter->expr());
		}
		if ($filter !== null) $select->limit($filter->limit, $filter->offset);
		if ($filter !== null) $select->order($filter->orderBy);
		$resultSet = $this->getDbTable()->fetchAll($select);
		$entries = array();
		foreach ($resultSet as $row) {
			$entry = new Repository_Model_MetaPoaReleasePackage();
			$this->populate($entry,$row);
			if ($format === 'xml') $entry = $entry->toXML(true);
			$entries[] = $entry;
		}		return $entries;
	}
}