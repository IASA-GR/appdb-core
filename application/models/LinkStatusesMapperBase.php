<?php
/**
 * Copyright (C) 2015 IASA - Institute of Accelerating Systems and Applications (http://www.iasa.gr)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */
?>
<?php
// PLEASE DO NOT EDIT THIS FILE
// IT IS AUTOMATOCALLY GENERATED BY THE MODELLER
// AND ANY CHANGES WILL BE OVERWRITTEN
class Default_Model_LinkStatusesMapperBase
{
	protected $_dbTable;

	private function pgBool($v) { if ($v) return 't'; else return 'f'; }

	public function setDbTable($dbTable)
	{
		if (is_string($dbTable)) {
			$dbTable = new $dbTable();
		}
		if (!$dbTable instanceof Zend_Db_Table_Abstract) {
			throw new Exception('Invalid table data gateway provided');
		}
			$this->_dbTable = $dbTable;
			return $this;
	}

	public function getDbTable()
	{
		if (null === $this->_dbTable) {
			$this->setDbTable('Default_Model_DbTable_LinkStatuses');
		}
		return $this->_dbTable;
	}

	public function save(Default_Model_LinkStatus $value)
	{
		global $application;
		$data = array();
		if ( ! isnull($value->getAppName()) ) $data['appname'] = $value->getAppName();
		if ( ! isnull($value->getOwnerID()) ) $data['ownerid'] = $value->getOwnerID();
		if ( ! isnull($value->getOwnerName()) ) $data['ownername'] = $value->getOwnerName();
		if ( ! isnull($value->getContact()) ) $data['contact'] = $value->getContact();
		if ( ! isnull($value->getTitle()) ) $data['title'] = $value->getTitle();
		if ( ! isnull($value->getLinkID()) ) $data['linkid'] = $value->getLinkID();
		if ( ! isnull($value->getAppID()) ) $data['appid'] = $value->getAppID();
		if ( ! isnull($value->getLinkType()) ) $data['linktype'] = $value->getLinkType();
		if ( ! isnull($value->getUrlName()) ) $data['urlname'] = $value->getUrlName();
		if ( ! isnull($value->getParentName()) ) $data['parentname'] = $value->getParentName();
		if ( ! isnull($value->getBaseRef()) ) $data['baseref'] = $value->getBaseRef();
		if ( ! isnull($value->getValID()) ) $data['valid'] = $value->getValID();
		if ( ! isnull($value->getResult()) ) $data['result'] = $value->getResult();
		if ( ! isnull($value->getWarning()) ) $data['warning'] = $value->getWarning();
		if ( ! isnull($value->getInfo()) ) $data['info'] = $value->getInfo();
		if ( ! isnull($value->getUrl()) ) $data['url'] = $value->getUrl();
		if ( ! isnull($value->getLine()) ) $data['line'] = $value->getLine();
		if ( ! isnull($value->getCol()) ) $data['col'] = $value->getCol();
		if ( ! isnull($value->getName()) ) $data['name'] = $value->getName();
		if ( ! isnull($value->getCheckTime()) ) $data['checktime'] = $value->getCheckTime();
		if ( ! isnull($value->getDlTime()) ) $data['dltime'] = $value->getDlTime();
		if ( ! isnull($value->getDlSize()) ) $data['dlsize'] = $value->getDlSize();
		if ( ! isnull($value->getCached()) ) $data['cached'] = $value->getCached();
		if ( ! isnull($value->getFirstChecked()) ) $data['firstchecked'] = $value->getFirstChecked();
		if ( ! isnull($value->getLastChecked()) ) $data['lastchecked'] = $value->getLastChecked();
		if ( ! isnull($value->getAge()) ) $data['age'] = $value->getAge();
		if ( ! isnull($value->getWhitelisted()) ) $data['whitelisted'] = $this->pgBool($value->getWhitelisted());


		$q1 = '';
		$q2 = '';
		if (null === ($id = '')) {
			unset($data['']);
			$this->getDbTable()->insert($data);
		} else {
			$s = $this->getDbTable()->getAdapter()->quoteInto($q1,$q2);
			$this->getDbTable()->update($data, $s);
		}
	}

	public function delete(Default_Model_LinkStatus $value)
	{
		$q1 = '';
		$q2 = '';
		$s=$this->getDbTable()->getAdapter()->quoteInto($q1,$q2);
		$this->getDbTable()->delete($s);
	}

	public function populate(&$entry,$row)
	{
		$entry->setAppName($row->appname);
		$entry->setOwnerID($row->ownerid);
		$entry->setOwnerName($row->ownername);
		$entry->setContact($row->contact);
		$entry->setTitle($row->title);
		$entry->setLinkID($row->linkid);
		$entry->setAppID($row->appid);
		$entry->setLinkType($row->linktype);
		$entry->setUrlName($row->urlname);
		$entry->setParentName($row->parentname);
		$entry->setBaseRef($row->baseref);
		$entry->setValID($row->valid);
		$entry->setResult($row->result);
		$entry->setWarning($row->warning);
		$entry->setInfo($row->info);
		$entry->setUrl($row->url);
		$entry->setLine($row->line);
		$entry->setCol($row->col);
		$entry->setName($row->name);
		$entry->setCheckTime($row->checktime);
		$entry->setDlTime($row->dltime);
		$entry->setDlSize($row->dlsize);
		$entry->setCached($row->cached);
		$entry->setFirstChecked($row->firstchecked);
		$entry->setLastChecked($row->lastchecked);
		$entry->setAge($row->age);
		$entry->setWhitelisted($row->whitelisted);
	}

	public function find($id, Default_Model_LinkStatuses &$value)
	{
		$result = $this->getDbTable()->find($id);
		if (0 == count($result)) {
			return;
		}		$row = $result->current();
		$this->populate($value,$row);	}

	public function count($filter = null)
	{
		$select = $this->getDbTable()->select();
		$select->from($this->getDbTable(),array('COUNT(*) AS count'));
		if ( ($filter !== null) && ($filter->expr() != '') ) {
			$select->where($filter->expr());
		}
		$res = $this->getDbTable()->fetchAll($select);
		return $res[0]->count;
	}
	public function fetchAll($filter = null, $format = '')
	{
		$select = $this->getDbTable()->select();
		if ( ($filter !== null) && ($filter->expr() != '') ) {
			$select->where($filter->expr());
		}
		if ($filter !== null) $select->limit($filter->limit, $filter->offset);
		if ($filter !== null) $select->order($filter->orderBy);
		$resultSet = $this->getDbTable()->fetchAll($select);
		$entries = array();
		foreach ($resultSet as $row) {
			$entry = new Default_Model_LinkStatus();
			$this->populate($entry,$row);
			if ($format === 'xml') $entry = $entry->toXML(true);
			$entries[] = $entry;
		}		return $entries;
	}
}