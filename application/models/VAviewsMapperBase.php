<?php
/**
 * Copyright (C) 2015 IASA - Institute of Accelerating Systems and Applications (http://www.iasa.gr)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */
?>
<?php
// PLEASE DO NOT EDIT THIS FILE
// IT IS AUTOMATOCALLY GENERATED BY THE MODELLER
// AND ANY CHANGES WILL BE OVERWRITTEN
class Default_Model_VAviewsMapperBase
{
	protected $_dbTable;

	private function pgBool($v) { if ($v) return 't'; else return 'f'; }

	public function setDbTable($dbTable)
	{
		if (is_string($dbTable)) {
			$dbTable = new $dbTable();
		}
		if (!$dbTable instanceof Zend_Db_Table_Abstract) {
			throw new Exception('Invalid table data gateway provided');
		}
			$this->_dbTable = $dbTable;
			return $this;
	}

	public function getDbTable()
	{
		if (null === $this->_dbTable) {
			$this->setDbTable('Default_Model_DbTable_VAviews');
		}
		return $this->_dbTable;
	}

	public function save(Default_Model_VAview $value)
	{
		global $application;
		$data = array();
		if ( ! isnull($value->getVapplistID()) ) $data['vapplistid'] = $value->getVapplistID();
		if ( ! isnull($value->getVappversionID()) ) $data['vappversionid'] = $value->getVappversionID();
		if ( ! isnull($value->getVmiinstanceID()) ) $data['vmiinstanceid'] = $value->getVmiinstanceID();
		if ( ! isnull($value->getSize()) ) $data['size'] = $value->getSize();
		if ( ! isnull($value->getUri()) ) $data['uri'] = $value->getUri();
		if ( ! isnull($value->getVmiinstanceVersion()) ) $data['vmiinstance_version'] = $value->getVmiinstanceVersion();
		if ( ! isnull($value->getChecksum()) ) $data['checksum'] = $value->getChecksum();
		if ( ! isnull($value->getChecksumfunc()) ) $data['checksumfunc'] = $value->getChecksumfunc();
		if ( ! isnull($value->getVmiinstanceNotes()) ) $data['vmiinstance_notes'] = $value->getVmiinstanceNotes();
		if ( ! isnull($value->getVmiinstanceGUID()) ) $data['vmiinstance_guid'] = $value->getVmiinstanceGUID();
		if ( ! isnull($value->getVmiinstanceAddedon()) ) $data['vmiinstance_addedon'] = $value->getVmiinstanceAddedon();
		if ( ! isnull($value->getVmiinstanceAddedByID()) ) $data['vmiinstance_addedby'] = $value->getVmiinstanceAddedByID();
		if ( ! isnull($value->getVmiflavourID()) ) $data['vmiflavourid'] = $value->getVmiflavourID();
		if ( ! isnull($value->getAutointegrity()) ) $data['autointegrity'] = $this->pgBool($value->getAutointegrity());
		if ( ! isnull($value->getCoreminimum()) ) $data['coreminimum'] = $value->getCoreminimum();
		if ( ! isnull($value->getRamminimum()) ) $data['ramminimum'] = $value->getRamminimum();
		if ( ! isnull($value->getVmiinstanceLastupdatedByID()) ) $data['vmiinstance_lastupdatedby'] = $value->getVmiinstanceLastupdatedByID();
		if ( ! isnull($value->getVmiinstanceLastupdatedon()) ) $data['vmiinstance_lastupdatedon'] = $value->getVmiinstanceLastupdatedon();
		if ( ! isnull($value->getVmiinstanceDescription()) ) $data['vmiinstance_description'] = $value->getVmiinstanceDescription();
		if ( ! isnull($value->getVmiinstanceTitle()) ) $data['vmiinstance_title'] = $value->getVmiinstanceTitle();
		if ( ! isnull($value->getIntegrityStatus()) ) $data['integrity_status'] = $value->getIntegrityStatus();
		if ( ! isnull($value->getIntegrityMessage()) ) $data['integrity_message'] = $value->getIntegrityMessage();
		if ( ! isnull($value->getRamrecommend()) ) $data['ramrecommend'] = $value->getRamrecommend();
		if ( ! isnull($value->getCorerecommend()) ) $data['corerecommend'] = $value->getCorerecommend();
		if ( ! isnull($value->getAccessinfo()) ) $data['accessinfo'] = $value->getAccessinfo();
		if ( ! isnull($value->getVmiinstanceEnabled()) ) $data['vmiinstance_enabled'] = $this->pgBool($value->getVmiinstanceEnabled());
		if ( ! isnull($value->getInitialsize()) ) $data['initialsize'] = $value->getInitialsize();
		if ( ! isnull($value->getInitialchecksum()) ) $data['initialchecksum'] = $value->getInitialchecksum();
		if ( ! isnull($value->getOvfurl()) ) $data['ovfurl'] = $value->getOvfurl();
		if ( ! isnull($value->getVmiID()) ) $data['vmiid'] = $value->getVmiID();
		if ( ! isnull($value->getHypervisors()) ) $data['hypervisors'] = $value->getHypervisors();
		if ( ! isnull($value->getArchID()) ) $data['archid'] = $value->getArchID();
		if ( ! isnull($value->getOsID()) ) $data['osid'] = $value->getOsID();
		if ( ! isnull($value->getOsversion()) ) $data['osversion'] = $value->getOsversion();
		if ( ! isnull($value->getFormat()) ) $data['format'] = $value->getFormat();
		if ( ! isnull($value->getVmiName()) ) $data['vmi_name'] = $value->getVmiName();
		if ( ! isnull($value->getVmiDescription()) ) $data['vmi_description'] = $value->getVmiDescription();
		if ( ! isnull($value->getVmiGUID()) ) $data['vmi_guid'] = $value->getVmiGUID();
		if ( ! isnull($value->getVaId()) ) $data['va_id'] = $value->getVaId();
		if ( ! isnull($value->getVmiNotes()) ) $data['vmi_notes'] = $value->getVmiNotes();
		if ( ! isnull($value->getGroupname()) ) $data['groupname'] = $value->getGroupname();
		if ( ! isnull($value->getVaName()) ) $data['va_name'] = $value->getVaName();
		if ( ! isnull($value->getAppID()) ) $data['appid'] = $value->getAppID();
		if ( ! isnull($value->getVaGUID()) ) $data['va_guid'] = $value->getVaGUID();
		if ( ! isnull($value->getImglstPrivate()) ) $data['imglst_private'] = $this->pgBool($value->getImglstPrivate());
		if ( ! isnull($value->getVaVersion()) ) $data['va_version'] = $value->getVaVersion();
		if ( ! isnull($value->getVaVersionGUID()) ) $data['va_version_guid'] = $value->getVaVersionGUID();
		if ( ! isnull($value->getVaVersionNotes()) ) $data['va_version_notes'] = $value->getVaVersionNotes();
		if ( ! isnull($value->getVaVersionPublished()) ) $data['va_version_published'] = $this->pgBool($value->getVaVersionPublished());
		if ( ! isnull($value->getVaVersionCreatedon()) ) $data['va_version_createdon'] = $value->getVaVersionCreatedon();
		if ( ! isnull($value->getVaVersionExpireson()) ) $data['va_version_expireson'] = $value->getVaVersionExpireson();
		if ( ! isnull($value->getVaVersionEnabled()) ) $data['va_version_enabled'] = $this->pgBool($value->getVaVersionEnabled());
		if ( ! isnull($value->getVaVersionArchived()) ) $data['va_version_archived'] = $this->pgBool($value->getVaVersionArchived());
		if ( ! isnull($value->getVaVersionStatus()) ) $data['va_version_status'] = $value->getVaVersionStatus();
		if ( ! isnull($value->getVaVersionArchivedon()) ) $data['va_version_archivedon'] = $value->getVaVersionArchivedon();
		if ( ! isnull($value->getSubmissionID()) ) $data['submissionid'] = $value->getSubmissionID();
		if ( ! isnull($value->getVaVersionIsexternal()) ) $data['va_version_isexternal'] = $this->pgBool($value->getVaVersionIsexternal());


		$q1 = '';
		$q2 = '';
		if (null === ($id = '')) {
			unset($data['']);
			$this->getDbTable()->insert($data);
		} else {
			$s = $this->getDbTable()->getAdapter()->quoteInto($q1,$q2);
			$this->getDbTable()->update($data, $s);
		}
	}

	public function delete(Default_Model_VAview $value)
	{
		$q1 = '';
		$q2 = '';
		$s=$this->getDbTable()->getAdapter()->quoteInto($q1,$q2);
		$this->getDbTable()->delete($s);
	}

	public function populate(&$entry,$row)
	{
		$entry->setVapplistID($row->vapplistid);
		$entry->setVappversionID($row->vappversionid);
		$entry->setVmiinstanceID($row->vmiinstanceid);
		$entry->setSize($row->size);
		$entry->setUri($row->uri);
		$entry->setVmiinstanceVersion($row->vmiinstance_version);
		$entry->setChecksum($row->checksum);
		$entry->setChecksumfunc($row->checksumfunc);
		$entry->setVmiinstanceNotes($row->vmiinstance_notes);
		$entry->setVmiinstanceGUID($row->vmiinstance_guid);
		$entry->setVmiinstanceAddedon($row->vmiinstance_addedon);
		$entry->setVmiinstanceAddedByID($row->vmiinstance_addedby);
		$entry->setVmiflavourID($row->vmiflavourid);
		$entry->setAutointegrity($row->autointegrity);
		$entry->setCoreminimum($row->coreminimum);
		$entry->setRamminimum($row->ramminimum);
		$entry->setVmiinstanceLastupdatedByID($row->vmiinstance_lastupdatedby);
		$entry->setVmiinstanceLastupdatedon($row->vmiinstance_lastupdatedon);
		$entry->setVmiinstanceDescription($row->vmiinstance_description);
		$entry->setVmiinstanceTitle($row->vmiinstance_title);
		$entry->setIntegrityStatus($row->integrity_status);
		$entry->setIntegrityMessage($row->integrity_message);
		$entry->setRamrecommend($row->ramrecommend);
		$entry->setCorerecommend($row->corerecommend);
		$entry->setAccessinfo($row->accessinfo);
		$entry->setVmiinstanceEnabled($row->vmiinstance_enabled);
		$entry->setInitialsize($row->initialsize);
		$entry->setInitialchecksum($row->initialchecksum);
		$entry->setOvfurl($row->ovfurl);
		$entry->setVmiID($row->vmiid);
		$entry->setHypervisors($row->hypervisors);
		$entry->setArchID($row->archid);
		$entry->setOsID($row->osid);
		$entry->setOsversion($row->osversion);
		$entry->setFormat($row->format);
		$entry->setVmiName($row->vmi_name);
		$entry->setVmiDescription($row->vmi_description);
		$entry->setVmiGUID($row->vmi_guid);
		$entry->setVaId($row->va_id);
		$entry->setVmiNotes($row->vmi_notes);
		$entry->setGroupname($row->groupname);
		$entry->setVaName($row->va_name);
		$entry->setAppID($row->appid);
		$entry->setVaGUID($row->va_guid);
		$entry->setImglstPrivate($row->imglst_private);
		$entry->setVaVersion($row->va_version);
		$entry->setVaVersionGUID($row->va_version_guid);
		$entry->setVaVersionNotes($row->va_version_notes);
		$entry->setVaVersionPublished($row->va_version_published);
		$entry->setVaVersionCreatedon($row->va_version_createdon);
		$entry->setVaVersionExpireson($row->va_version_expireson);
		$entry->setVaVersionEnabled($row->va_version_enabled);
		$entry->setVaVersionArchived($row->va_version_archived);
		$entry->setVaVersionStatus($row->va_version_status);
		$entry->setVaVersionArchivedon($row->va_version_archivedon);
		$entry->setSubmissionID($row->submissionid);
		$entry->setVaVersionIsexternal($row->va_version_isexternal);
	}

	public function find($id, Default_Model_VAviews &$value)
	{
		$result = $this->getDbTable()->find($id);
		if (0 == count($result)) {
			return;
		}		$row = $result->current();
		$this->populate($value,$row);	}

	public function count($filter = null)
	{
		$select = $this->getDbTable()->select();
		$select->from($this->getDbTable(),array('COUNT(*) AS count'));
		if ( ($filter !== null) && ($filter->expr() != '') ) {
			$select->where($filter->expr());
		}
		$res = $this->getDbTable()->fetchAll($select);
		return $res[0]->count;
	}
	public function fetchAll($filter = null, $format = '')
	{
		$select = $this->getDbTable()->select();
		if ( ($filter !== null) && ($filter->expr() != '') ) {
			$select->where($filter->expr());
		}
		if ($filter !== null) $select->limit($filter->limit, $filter->offset);
		if ($filter !== null) $select->order($filter->orderBy);
		$resultSet = $this->getDbTable()->fetchAll($select);
		$entries = array();
		foreach ($resultSet as $row) {
			$entry = new Default_Model_VAview();
			$this->populate($entry,$row);
			if ($format === 'xml') $entry = $entry->toXML(true);
			$entries[] = $entry;
		}		return $entries;
	}
}