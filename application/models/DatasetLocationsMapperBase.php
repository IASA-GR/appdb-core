<?php
/**
 * Copyright (C) 2015 IASA - Institute of Accelerating Systems and Applications (http://www.iasa.gr)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */
?>
<?php
// PLEASE DO NOT EDIT THIS FILE
// IT IS AUTOMATOCALLY GENERATED BY THE MODELLER
// AND ANY CHANGES WILL BE OVERWRITTEN
class Default_Model_DatasetLocationsMapperBase
{
	protected $_dbTable;

	private function pgBool($v) { if ($v) return 't'; else return 'f'; }

	public function setDbTable($dbTable)
	{
		if (is_string($dbTable)) {
			$dbTable = new $dbTable();
		}
		if (!$dbTable instanceof Zend_Db_Table_Abstract) {
			throw new Exception('Invalid table data gateway provided');
		}
			$this->_dbTable = $dbTable;
			return $this;
	}

	public function getDbTable()
	{
		if (null === $this->_dbTable) {
			$this->setDbTable('Default_Model_DbTable_DatasetLocations');
		}
		return $this->_dbTable;
	}

	public function save(Default_Model_DatasetLocation $value)
	{
		global $application;
		$data = array();
		if ( ! isnull($value->getId()) ) $data['id'] = $value->getId();
		if ( ! isnull($value->getAddedByID()) ) $data['addedby'] = $value->getAddedByID();
		if ( ! isnull($value->getAddedon()) ) $data['addedon'] = $value->getAddedon();
		if ( ! isnull($value->getUri()) ) $data['uri'] = $value->getUri();
		if ( ! isnull($value->getIsMaster()) ) $data['is_master'] = $this->pgBool($value->getIsMaster());
		if ( ! isnull($value->getExchangeFormatID()) ) $data['exchange_fmt'] = $value->getExchangeFormatID();
		if ( ! isnull($value->getConnectionTypeID()) ) $data['connection_type'] = $value->getConnectionTypeID();
		if ( ! isnull($value->getIsPublic()) ) $data['is_public'] = $this->pgBool($value->getIsPublic());
		if ( ! isnull($value->getOrganizationID()) ) $data['organizationid'] = $value->getOrganizationID();
		if ( ! isnull($value->getSiteID()) ) $data['siteid'] = $value->getSiteID();
		if ( ! isnull($value->getNotes()) ) $data['notes'] = $value->getNotes();
		if ( ! isnull($value->getDatasetVersionId()) ) $data['dataset_version_id'] = $value->getDatasetVersionId();


		$q1 = 'id = ?';
		$q2 = $value->id;
		if (null === ($id = $value->id)) {
			unset($data['id']);
			$value->id = $this->getDbTable()->insert($data);
		} else {
			$s = $this->getDbTable()->getAdapter()->quoteInto($q1,$q2);
			$this->getDbTable()->update($data, $s);
		}
	}

	public function delete(Default_Model_DatasetLocation $value)
	{
		$q1 = 'id = ?';
		$q2 = $value->id;
		$s=$this->getDbTable()->getAdapter()->quoteInto($q1,$q2);
		$this->getDbTable()->delete($s);
	}

	public function populate(&$entry,$row)
	{
		$entry->setId($row->id);
		$entry->setAddedByID($row->addedby);
		$entry->setAddedon($row->addedon);
		$entry->setUri($row->uri);
		$entry->setIsMaster($row->is_master);
		$entry->setExchangeFormatID($row->exchange_fmt);
		$entry->setConnectionTypeID($row->connection_type);
		$entry->setIsPublic($row->is_public);
		$entry->setOrganizationID($row->organizationid);
		$entry->setSiteID($row->siteid);
		$entry->setNotes($row->notes);
		$entry->setDatasetVersionId($row->dataset_version_id);
	}

	public function find($id, Default_Model_DatasetLocations &$value)
	{
		$result = $this->getDbTable()->find($id);
		if (0 == count($result)) {
			return;
		}		$row = $result->current();
		$this->populate($value,$row);	}

	public function count($filter = null)
	{
		$select = $this->getDbTable()->select();
		$select->from($this->getDbTable(),array('COUNT(DISTINCT (id)) AS count'));
		if ( ($filter !== null) && ($filter->expr() != '') ) {
			$select->where($filter->expr());
		}
		$res = $this->getDbTable()->fetchAll($select);
		return $res[0]->count;
	}
	public function fetchAll($filter = null, $format = '')
	{
		$select = $this->getDbTable()->select();
		if ( ($filter !== null) && ($filter->expr() != '') ) {
			$select->where($filter->expr());
		}
		if ($filter !== null) $select->limit($filter->limit, $filter->offset);
		if ($filter !== null) $select->order($filter->orderBy);
		$resultSet = $this->getDbTable()->fetchAll($select);
		$entries = array();
		foreach ($resultSet as $row) {
			$entry = new Default_Model_DatasetLocation();
			$this->populate($entry,$row);
			if ($format === 'xml') $entry = $entry->toXML(true);
			$entries[] = $entry;
		}		return $entries;
	}
}
